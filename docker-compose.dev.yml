services:
  postgres:
    build:
      context: ./postgres
      dockerfile: Dockerfile
    image: clemeit/ddoaudit-postgres:latest
    restart: always
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - backend
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "pgadmin", "-d", "ddoaudit" ]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 60s

  redis:
    build:
      context: ./redis
      dockerfile: Dockerfile
    image: clemeit/ddoaudit-redis:latest
    restart: always
    networks:
      - backend
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 2s
      timeout: 5s
      retries: 3
      start_period: 60s
    volumes:
      - redis_data:/data

  sanic:
    build:
      context: ./sanic
      dockerfile: Dockerfile
    image: clemeit/ddoaudit-sanic:latest
    restart: always
    environment:
      - API_KEY=${API_KEY}
      - APP_HOST=${APP_HOST}
      - APP_PORT=${APP_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_MIN_CONN=${POSTGRES_MIN_CONN}
      - POSTGRES_MAX_CONN=${POSTGRES_MAX_CONN}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - BETTERSTACK_SERVER_STATUS_KEY=${BETTERSTACK_SERVER_STATUS_KEY}
      - PRERENDER_TOKEN=${PRERENDER_TOKEN}
    expose:
      - 8000
    networks:
      - backend
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "python", "-c", "import urllib.request; exit(0) if urllib.request.urlopen('http://localhost:8000/health').status==200 else exit(1)" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 60s

  nginx:
    build:
      context: .
      dockerfile: ./nginx/Dockerfile
    image: clemeit/ddoaudit-nginx:latest
    restart: always
    ports:
      - "80:80" # support http redirect
      - "443:443"
    networks:
      - backend
    depends_on:
      sanic:
        condition: service_healthy
      prerender:
        condition: service_healthy
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/api.dev.conf:/etc/nginx/conf.d/api.conf:ro
      - ./nginx/www.dev.conf:/etc/nginx/conf.d/www.conf:ro
      - ./nginx/pgadmin.dev.conf:/etc/nginx/conf.d/pgadmin.conf:ro
      - ./client:/usr/share/nginx/html:ro
      - /etc/letsencrypt:/etc/letsencrypt

  pgadmin:
    image: dpage/pgadmin4:9.8.0
    restart: always
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    networks:
      - backend
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - pgadmin_data:/var/lib/pgadmin

  monitoring:
    build:
      context: ./monitoring
      dockerfile: Dockerfile
    image: clemeit/ddoaudit-monitoring:latest
    restart: always
    environment:
      - BETTERSTACK_SERVER_INFO_API_KEY=${BETTERSTACK_SERVER_INFO_API_KEY}
      - BETTERSTACK_CHARACTER_API_KEY=${BETTERSTACK_CHARACTER_API_KEY}
      - BETTERSTACK_LFM_API_KEY=${BETTERSTACK_LFM_API_KEY}
    networks:
      - backend
    depends_on:
      sanic:
        condition: service_healthy
  
  prerender:
    build:
      context: ./prerender
      dockerfile: Dockerfile
    container_name: prerender
    ports:
      - "3000:3000"
    environment:
      # Redis connection (adjust these to match your existing Redis container)
      REDIS_HOST: redis
      REDIS_PORT: 6379
      # REDIS_PASSWORD: your_redis_password  # Uncomment if Redis requires password
      
      # Cache TTL in seconds (default: 86400 = 24 hours)
      CACHE_TTL: 86400
      
      # Page rendering timeout in milliseconds (default: 30000 = 30 seconds)
      PAGE_TIMEOUT: 30000
      
      # Wait condition: load, domcontentloaded, networkidle0, networkidle2
      WAIT_UNTIL: networkidle0
      
      # Optional: Comma-separated list of allowed domains
      # ALLOWED_DOMAINS: example.com,mysite.com
      
      # Server port
      PORT: 3000
    restart: unless-stopped
    networks:
      - backend
    # Add extra hosts to resolve localtest.me from container
    extra_hosts:
      - "www.localtest.me:host-gateway"
      - "api.localtest.me:host-gateway"
    # Add security options
    security_opt:
      - no-new-privileges:true
    # Resource limits (adjust based on your needs)
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

networks:
  backend:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  pgadmin_data:
