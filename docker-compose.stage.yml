services:
  postgres:
    build:
      context: ./postgres
      dockerfile: Dockerfile
    image: clemeit/ddoaudit-postgres:latest
    restart: always
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - backend
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}" ]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 60s

  prerender:
    build:
      context: ./prerender
      dockerfile: Dockerfile
    image: clemeit/ddoaudit-prerender:latest
    restart: always
    environment:
      # Redis connection
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      # REDIS_PASSWORD=${REDIS_PASSWORD}  # Uncomment if Redis requires password
      
      # Cache TTL in seconds (default: 86400 = 24 hours)
      - CACHE_TTL=${PRERENDER_CACHE_TTL:-86400}
      
      # Page rendering timeout in milliseconds (default: 30000 = 30 seconds)
      - PAGE_TIMEOUT=${PRERENDER_PAGE_TIMEOUT:-30000}
      
      # Wait condition: load, domcontentloaded, networkidle0, networkidle2
      - WAIT_UNTIL=${PRERENDER_WAIT_UNTIL:-networkidle0}
      
      # Optional: Comma-separated list of allowed domains
      # ALLOWED_DOMAINS=${PRERENDER_ALLOWED_DOMAINS}
      
      # Server port
      - PORT=3000
    expose:
      - 3000
    networks:
      - backend
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (r) => { process.exit(r.statusCode === 200 ? 0 : 1); }).on('error', () => process.exit(1));"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # Add security options
    security_opt:
      - no-new-privileges:true
    # Resource limits (adjust based on your needs)
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  redis:
    build:
      context: ./redis
      dockerfile: Dockerfile
    image: clemeit/ddoaudit-redis:latest
    restart: always
    networks:
      - backend
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 2s
      timeout: 5s
      retries: 3
      start_period: 60s
    volumes:
      - redis_data:/data

  sanic:
    build:
      context: ./sanic
      dockerfile: Dockerfile
    image: clemeit/ddoaudit-sanic:latest
    restart: always
    environment:
      - API_KEY=${API_KEY}
      - APP_HOST=${APP_HOST}
      - APP_PORT=${APP_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_MIN_CONN=${POSTGRES_MIN_CONN}
      - POSTGRES_MAX_CONN=${POSTGRES_MAX_CONN}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - BETTERSTACK_SERVER_STATUS_KEY=${BETTERSTACK_SERVER_STATUS_KEY}
      - PRERENDER_TOKEN=${PRERENDER_TOKEN}
    expose:
      - 8000
    networks:
      - backend
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "python", "-c", "import urllib.request; exit(0) if urllib.request.urlopen('http://localhost:8000/health', timeout=5).status==200 else exit(1)" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 60s

  nginx:
    build:
      context: .
      dockerfile: ./nginx/Dockerfile.stage
    image: clemeit/ddoaudit-nginx:latest
    restart: always
    ports:
      - "8080:80" # support http redirect
      - "8443:443"
    networks:
      - backend
    depends_on:
      sanic:
        condition: service_healthy
      prerender:
        condition: service_healthy
    volumes:
      - /var/www/ddoaudit-stage.com/html/client/build:/usr/share/nginx/html:ro
      - /var/www/ddoaudit.com/acme-challenge:/acme-challenge
      - /etc/letsencrypt:/etc/letsencrypt
      - /var/www/ddoaudit-stage.com/app/00-prerender-token.conf:/etc/nginx/conf.d/00-prerender-token.conf:ro

  pgadmin:
    image: dpage/pgadmin4:9.8.0
    restart: always
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    networks:
      - backend
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - pgadmin_data:/var/lib/pgadmin

networks:
  backend:
    driver: bridge

volumes:
  postgres_data:
    external: true
    name: ddoaudit-stage_postgres_data
  redis_data:
    external: true
    name: ddoaudit-stage_redis_data
  pgadmin_data:
    external: true
    name: ddoaudit-stage_pgadmin_data
